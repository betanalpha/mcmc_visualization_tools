right <- +1.5
bottom <- -1.5
top <- +1.5
set.seed(48383992)
N <- 10
xs <- runif(N, left, right)
ys <- runif(N, bottom, top)
cat(sprintf("%.3f/%.3f,", xs, ys), "\n")
left <- -1.5 * 0.8
right <- +1.5 * 0.8
bottom <- -1.5 * 0.9
top <- +1.5 * 0.9
set.seed(48383992)
N <- 10
xs <- runif(N, left, right)
ys <- runif(N, bottom, top)
cat(sprintf("%.3f/%.3f,", xs, ys), "\n")
101 / 1:101
?prime
??prime
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
parallel:::setDefaultClusterOptions(setup_strategy = "sequential")
util <- new.env()
source('stan_utility_rstan.R', local=util)
setwd("~/Desktop/visualization_functions/r")
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
parallel:::setDefaultClusterOptions(setup_strategy = "sequential")
util <- new.env()
source('stan_utility_rstan.R', local=util)
source('visualization_functions.R', local=util)
par(family="serif", las=1, bty="l", cex.axis=1, cex.lab=1, cex.main=1,
xaxs="i", yaxs="i", mar = c(5, 5, 3, 1))
data <- read_rdump("data/uni_data.R")
par(mfrow=c(1, 2))
util$plot_line_hist(data$x, -6, 6, 0.5,
xlab="x", main="Observed Inputs")
util$plot_line_hist(data$y, -4, 7, 0.5,
xlab="y", main="Observed Outputs")
par(mfrow=c(1, 1))
util$plot_line_hists(data$x, data$y, -6, 7, 0.5, xlab="")
text(-3.5, 90, cex=1.25, label="Observed\nInputs",
pos=4, col="black")
text(3.5, 90, cex=1.25, label="Observed\nOutputs",
pos=4, col=util$c_mid_teal)
par(mfrow=c(1, 1))
plot(data$x, data$y, type="p", pch=16, cex=1, col="black")
data$N_grid <- 1000
data$x_grid <- seq(-6, 6, 12 / (data$N_grid - 1))
fit <- stan(file='stan_programs/uni_prior_model.stan',
data=data, seed=5838299,
warmup=1000, iter=2024, refresh=0)
diagnostics <- util$extract_hmc_diagnostics(fit)
util$check_all_hmc_diagnostics(diagnostics)
samples <- util$extract_expectands(fit)
base_samples <- util$filter_expectands(samples,
c('alpha', 'beta', 'sigma'))
util$check_all_expectand_diagnostics(base_samples)
par(mfrow=c(2, 1))
f_names <- sapply(1:data$N_grid, function(n) paste0('f_grid[', n, ']'))
util$plot_realizations(samples, f_names, data$x_grid,
xlab="x", ylab="f")
util$plot_conn_pushforward_quantiles(samples, f_names, data$x_grid,
xlab="x", ylab="f")
par(mfrow=c(1, 1))
pred_names <- sapply(1:data$N_grid, function(n) paste0('y_pred_grid[', n, ']'))
util$plot_conn_pushforward_quantiles(samples, pred_names, data$x_grid,
xlab="x", ylab="y")
fit <- stan(file='stan_programs/uni_full_model.stan',
data=data, seed=5838299,
warmup=1000, iter=2024, refresh=0)
diagnostics <- util$extract_hmc_diagnostics(fit)
util$check_all_hmc_diagnostics(diagnostics)
samples <- util$extract_expectands(fit)
base_samples <- util$filter_expectands(samples,
c('alpha', 'beta', 'sigma'))
util$check_all_expectand_diagnostics(base_samples)
par(mfrow=c(1, 1))
pred_names <- sapply(1:data$N_grid, function(n) paste0('y_pred_grid[', n, ']'))
util$plot_conn_pushforward_quantiles(samples, pred_names, data$x_grid,
xlab="x", ylab="y")
points(data$x, data$y, pch=16, cex=1.0, col="white")
points(data$x, data$y, pch=16, cex=0.8, col="black")
par(mfrow=c(1, 3))
util$plot_expectand_pushforward(samples[["alpha"]], 25,
display_name="alpha")
util$plot_expectand_pushforward(samples[["beta"]], 25,
display_name="beta")
util$plot_expectand_pushforward(samples[["sigma"]], 25,
display_name="sigma")
par(mfrow=c(2, 1))
f_names <- sapply(1:data$N_grid, function(n) paste0('f_grid[', n, ']'))
util$plot_realizations(samples, f_names, data$x_grid,
xlab="x", ylab="f")
util$plot_conn_pushforward_quantiles(samples, f_names, data$x_grid,
xlab="x", ylab="f")
alpha_true <- 1.5
beta_true <- -0.75
sigma_true <- 0.33
par(mfrow=c(1, 3))
util$plot_expectand_pushforward(samples[["alpha"]], 25,
display_name="alpha",
baseline=alpha_true)
util$plot_expectand_pushforward(samples[["beta"]], 25,
display_name="beta"
baseline=beta_true)
par(mfrow=c(1, 3))
util$plot_expectand_pushforward(samples[["alpha"]], 25,
display_name="alpha",
baseline=alpha_true)
util$plot_expectand_pushforward(samples[["beta"]], 25,
display_name="beta",
baseline=beta_true)
util$plot_expectand_pushforward(samples[["sigma"]], 25,
display_name="sigma",
baseline=sigma_true)
fs_true <- alpha_true + beta_true * data$x
par(mfrow=c(2, 1))
f_names <- sapply(1:data$N_grid, function(n) paste0('f_grid[', n, ']'))
util$plot_realizations(samples, f_names, data$x_grid,
baseline_values=fs_true,
xlab="x", ylab="f")
util$plot_conn_pushforward_quantiles(samples, f_names, data$x_grid,
baseline_values=fs_true,
xlab="x", ylab="f")
fs_true <- alpha_true + beta_true * data$x_grid
par(mfrow=c(2, 1))
f_names <- sapply(1:data$N_grid, function(n) paste0('f_grid[', n, ']'))
util$plot_realizations(samples, f_names, data$x_grid,
baseline_values=fs_true,
xlab="x", ylab="f")
util$plot_conn_pushforward_quantiles(samples, f_names, data$x_grid,
baseline_values=fs_true,
xlab="x", ylab="f")
par(mfrow=c(2, 1))
util$plot_realizations(samples, f_names, data$x_grid,
baseline_values=fs_true,
residual=TRUE,
xlab="x", ylab="f")
util$plot_conn_pushforward_quantiles(samples, f_names, data$x_grid,
baseline_values=fs_true,
residual=TRUE,
xlab="x", ylab="f")
data <- read_rdump("data/multi_data.R")
par(mfrow=c(3, 3), mar = c(5, 5, 2, 1))
util$plot_line_hist(data$X[,1], -9, 9, 1, xlab="x1")
util$plot_line_hist(data$X[,2], -9, 9, 1, xlab="x1")
util$plot_line_hist(data$X[,3], -9, 9, 1, xlab="x1")
plot(data$X[,1], data$X[,2], pch=16, cex=1.0, col="black",
main="", xlim=c(-9, 9), xlab="x1", ylim=c(-9, 9), ylab="x2")
plot(data$X[,1], data$X[,3], pch=16, cex=1.0, col="black",
main="", xlim=c(-9, 9), xlab="x1", ylim=c(-9, 9), ylab="x3")
plot(data$X[,2], data$X[,3], pch=16, cex=1.0, col="black",
main="", xlim=c(-9, 9), xlab="x2", ylim=c(-9, 9), ylab="x3")
plot(data$X[,1], data$y, pch=16, cex=1.0, col="black",
main="", xlim=c(-9, 9), xlab="x1", ylim=c(-25, 325), ylab="y")
plot(data$X[,2], data$y, pch=16, cex=1.0, col="black",
main="", xlim=c(-9, 9), xlab="x2", ylim=c(-25, 325), ylab="y")
plot(data$X[,3], data$y, pch=16, cex=1.0, col="black",
main="", xlim=c(-9, 9), xlab="x3", ylim=c(-25, 325), ylab="y")
fit <- stan(file='stan_programs/multi_prior_model.stan',
data=data, seed=5838299,
warmup=1000, iter=2024, refresh=0)
diagnostics <- util$extract_hmc_diagnostics(fit)
util$check_all_hmc_diagnostics(diagnostics)
samples <- util$extract_expectands(fit)
base_samples <- util$filter_expectands(samples,
c('beta0', 'beta1',
'beta2_d', 'beta2_o',
'sigma'),
TRUE)
util$check_all_expectand_diagnostics(base_samples)
par(mfrow=c(1, 1))
util$plot_hist_quantiles(samples, 'y_pred')
par(mfrow=c(1, 3))
pred_names <- sapply(1:data$N, function(n) paste0('y_pred[', n, ']'))
util$plot_conditional_mean_quantiles(samples, pred_names, data$X[,1],
-9, 9, 1, xlab="x1")
util$plot_conditional_mean_quantiles(samples, pred_names, data$X[,2],
-9, 9, 1,xlab="x2")
util$plot_conditional_mean_quantiles(samples, pred_names, data$X[,3],
-9, 9, 1, xlab="x3")
par(mfrow=c(1, 3))
pred_names <- sapply(1:data$N, function(n) paste0('y_pred[', n, ']'))
util$plot_conditional_median_quantiles(samples, pred_names, data$X[,1],
-9, 9, 1, xlab="x1")
util$plot_conditional_median_quantiles(samples, pred_names, data$X[,2],
-9, 9, 1, xlab="x2")
util$plot_conditional_median_quantiles(samples, pred_names, data$X[,3],
-9, 9, 1, xlab="x3")
source('visualization_functions.R', local=util)
par(mfrow=c(1, 3))
pred_names <- sapply(1:data$N, function(n) paste0('y_pred[', n, ']'))
util$plot_conditional_mean_quantiles(samples, pred_names, data$X[,1],
-9, 9, 1, xlab="x1")
util$plot_conditional_mean_quantiles(samples, pred_names, data$X[,2],
-9, 9, 1,xlab="x2")
util$plot_conditional_mean_quantiles(samples, pred_names, data$X[,3],
-9, 9, 1, xlab="x3")
source('visualization_functions.R', local=util)
par(mfrow=c(1, 3))
pred_names <- sapply(1:data$N, function(n) paste0('y_pred[', n, ']'))
util$plot_conditional_mean_quantiles(samples, pred_names, data$X[,1],
-9, 9, 1, xlab="x1")
source('visualization_functions.R', local=util)
par(mfrow=c(1, 3))
pred_names <- sapply(1:data$N, function(n) paste0('y_pred[', n, ']'))
util$plot_conditional_mean_quantiles(samples, pred_names, data$X[,1],
-9, 9, 1, xlab="x1")
source('visualization_functions.R', local=util)
par(mfrow=c(1, 3))
pred_names <- sapply(1:data$N, function(n) paste0('y_pred[', n, ']'))
util$plot_conditional_mean_quantiles(samples, pred_names, data$X[,1],
-9, 9, 1, xlab="x1")
util$plot_conditional_mean_quantiles(samples, pred_names, data$X[,2],
-9, 9, 1,xlab="x2")
util$plot_conditional_mean_quantiles(samples, pred_names, data$X[,3],
-9, 9, 1, xlab="x3")
source('visualization_functions.R', local=util)
par(mfrow=c(1, 3))
pred_names <- sapply(1:data$N, function(n) paste0('y_pred[', n, ']'))
util$plot_conditional_mean_quantiles(samples, pred_names, data$X[,1],
-9, 9, 1, xlab="x1")
util$plot_conditional_mean_quantiles(samples, pred_names, data$X[,2],
-9, 9, 1,xlab="x2")
util$plot_conditional_mean_quantiles(samples, pred_names, data$X[,3],
-9, 9, 1, xlab="x3")
source('visualization_functions.R', local=util)
par(mfrow=c(1, 3))
pred_names <- sapply(1:data$N, function(n) paste0('y_pred[', n, ']'))
util$plot_conditional_mean_quantiles(samples, pred_names, data$X[,1],
-9, 9, 1, xlab="x1")
util$plot_conditional_mean_quantiles(samples, pred_names, data$X[,2],
-9, 9, 1,xlab="x2")
util$plot_conditional_mean_quantiles(samples, pred_names, data$X[,3],
-9, 9, 1, xlab="x3")
par(mfrow=c(1, 3))
pred_names <- sapply(1:data$N, function(n) paste0('y_pred[', n, ']'))
util$plot_conditional_median_quantiles(samples, pred_names, data$X[,1],
-9, 9, 1, xlab="x1")
util$plot_conditional_median_quantiles(samples, pred_names, data$X[,2],
-9, 9, 1, xlab="x2")
util$plot_conditional_median_quantiles(samples, pred_names, data$X[,3],
-9, 9, 1, xlab="x3")
fit <- stan(file='stan_programs/multi_full_model.stan',
data=data, seed=5838299,
warmup=1000, iter=2024, refresh=0)
diagnostics <- util$extract_hmc_diagnostics(fit)
util$check_all_hmc_diagnostics(diagnostics)
samples <- util$extract_expectands(fit)
base_samples <- util$filter_expectands(samples,
c('beta0', 'beta1',
'beta2_d', 'beta2_o',
'sigma'),
TRUE)
util$check_all_expectand_diagnostics(base_samples)
# Retrodictive Checks
par(mfrow=c(1, 1))
util$plot_hist_quantiles(samples, 'y_pred', baseline_values=data$y)
par(mfrow=c(2, 3))
pred_names <- sapply(1:data$N, function(n) paste0('y_pred[', n, ']'))
util$plot_conditional_mean_quantiles(samples, pred_names, data$X[,1],
-9, 9, 1, data$y, xlab="x1")
util$plot_conditional_mean_quantiles(samples, pred_names, data$X[,2],
-9, 9, 1, data$y, xlab="x2")
util$plot_conditional_mean_quantiles(samples, pred_names, data$X[,3],
-9, 9, 1, data$y, xlab="x3")
util$plot_conditional_mean_quantiles(samples, pred_names, data$X[,1],
-9, 9, 1, data$y, TRUE, xlab="x1")
util$plot_conditional_mean_quantiles(samples, pred_names, data$X[,2],
-9, 9, 1, data$y, TRUE, xlab="x2")
util$plot_conditional_mean_quantiles(samples, pred_names, data$X[,3],
-9, 9, 1, data$y, TRUE, xlab="x3")
par(mfrow=c(2, 3))
pred_names <- sapply(1:data$N, function(n) paste0('y_pred[', n, ']'))
util$plot_conditional_median_quantiles(samples, pred_names, data$X[,1],
-9, 9, 1, data$y, xlab="x1")
util$plot_conditional_median_quantiles(samples, pred_names, data$X[,2],
-9, 9, 1, data$y, xlab="x2")
util$plot_conditional_median_quantiles(samples, pred_names, data$X[,3],
-9, 9, 1, data$y, xlab="x3")
util$plot_conditional_median_quantiles(samples, pred_names, data$X[,1],
-9, 9, 1, data$y, TRUE, xlab="x1")
util$plot_conditional_median_quantiles(samples, pred_names, data$X[,2],
-9, 9, 1, data$y, TRUE, xlab="x2")
util$plot_conditional_median_quantiles(samples, pred_names, data$X[,3],
-9, 9, 1, data$y, TRUE, xlab="x3")
par(mfrow=c(4, 3))
util$plot_expectand_pushforward(samples[["beta0"]], 25,
display_name="beta0")
plot.new()
util$plot_expectand_pushforward(samples[["sigma"]], 25,
display_name="sigma")
for (m in 1:data$M) {
name <- paste0('beta1[', m, ']')
util$plot_expectand_pushforward(samples[[name]], 25,
display_name=name)
}
for (m in 1:data$M) {
name <- paste0('beta2_d[', m, ']')
util$plot_expectand_pushforward(samples[[name]], 25,
display_name=name)
}
for (m in 1:data$M) {
name <- paste0('beta2_o[', m, ']')
util$plot_expectand_pushforward(samples[[name]], 25,
display_name=name)
}
par(mfrow=c(1, 3))
names <- sapply(1:data$M, function(m) paste0('beta1[', m, ']'))
util$plot_disc_pushforward_quantiles(samples, names,
xlab="beta1",
ylab="Marginal Posterior Quantiles")
names <- sapply(1:data$M, function(m) paste0('beta2_d[', m, ']'))
util$plot_disc_pushforward_quantiles(samples, names,
xlab="beta2_d",
ylab="Marginal Posterior Quantiles")
names <- sapply(1:data$M, function(m) paste0('beta2_o[', m, ']'))
util$plot_disc_pushforward_quantiles(samples, names,
xlab="beta2_o",
ylab="Marginal Posterior Quantiles")
par(mfrow=c(1, 1))
names <- c('beta0',
sapply(1:data$M, function(m) paste0('beta1[', m, ']')),
sapply(1:data$M, function(m) paste0('beta2_d[', m, ']')),
sapply(1:data$M, function(m) paste0('beta2_o[', m, ']')))
util$plot_disc_pushforward_quantiles(samples, names,
xlab="All Slopes",
ylab="Marginal Posterior Quantiles")
f <- function(x) {
z0 <- c(3, 1, -2)
delta_x = x - z0
gamma0 <- 10
gamma1 <- c(2, -3, 1)
gamma2 <- rbind(c(0.5, -0.5, -2.0), c(-0.5, 0.25, -1.0), c(-2.0, -1.0, 1.0))
(gamma0 + t(delta_x) %*% gamma1 + t(delta_x) %*% gamma2 %*% delta_x)
}
dfdx <- function(x) {
z0 <- c(3, 1, -2)
delta_x = x - z0
gamma0 <- 10
gamma1 <- c(2, -3, 1)
gamma2 <- rbind(c(0.5, -0.5, -2.0), c(-0.5, 0.25, -1.0), c(-2.0, -1.0, 1.0))
(gamma1 + 2 * gamma2 %*% delta_x)
}
d2fdx2 <- function(x) {
gamma2 <- rbind(c(0.5, -0.5, -2.0), c(-0.5, 0.25, -1.0), c(-2.0, -1.0, 1.0))
(2 * gamma2)
}
x0 <- c(0, 2, -1)
slopes_true <- c(dfdx(x0)[1], dfdx(x0)[2], dfdx(x0)[3],
0.5 * d2fdx2(x0)[1, 1], 0.5 * d2fdx2(x0)[2, 2], 0.5 * d2fdx2(x0)[3, 3],
0.5 * d2fdx2(x0)[1, 2], 0.5 * d2fdx2(x0)[1, 3], 0.5 * d2fdx2(x0)[2, 3])
par(mfrow=c(1, 2))
util$plot_disc_pushforward_quantiles(samples, names,
baseline_values=slopes_true,
xlab="All Slopes",
ylab="Marginal Posterior Quantiles")
util$plot_disc_pushforward_quantiles(samples, names,
baseline_values=slopes_true,
residual=TRUE,
xlab="All Slopes",
ylab="Marginal Posterior Quantiles")
par(mfrow=c(1, 1))
names <- c(sapply(1:data$M, function(m) paste0('beta1[', m, ']')),
sapply(1:data$M, function(m) paste0('beta2_d[', m, ']')),
sapply(1:data$M, function(m) paste0('beta2_o[', m, ']')))
util$plot_disc_pushforward_quantiles(samples, names,
xlab="All Slopes",
ylab="Marginal Posterior Quantiles")
par(mfrow=c(1, 2))
util$plot_disc_pushforward_quantiles(samples, names,
baseline_values=slopes_true,
xlab="All Slopes",
ylab="Marginal Posterior Quantiles")
util$plot_disc_pushforward_quantiles(samples, names,
baseline_values=slopes_true,
residual=TRUE,
xlab="All Slopes",
ylab="Marginal Posterior Quantiles")
par(mfrow=c(2, 1))
util$plot_disc_pushforward_quantiles(samples, names,
baseline_values=slopes_true,
xlab="All Slopes",
ylab="Marginal Posterior Quantiles")
util$plot_disc_pushforward_quantiles(samples, names,
baseline_values=slopes_true,
residual=TRUE,
xlab="All Slopes",
ylab="Marginal Posterior Quantiles")
source('visualization_functions.R', local=util)
par(mfrow=c(2, 1))
util$plot_disc_pushforward_quantiles(samples, names,
baseline_values=slopes_true,
xlab="All Slopes",
ylab="Marginal Posterior Quantiles")
util$plot_disc_pushforward_quantiles(samples, names,
baseline_values=slopes_true,
residual=TRUE,
xlab="All Slopes",
ylab="Marginal Posterior Quantiles")
source('visualization_functions.R', local=util)
par(mfrow=c(2, 1))
util$plot_disc_pushforward_quantiles(samples, names,
baseline_values=slopes_true,
xlab="All Slopes",
ylab="Marginal Posterior Quantiles")
util$plot_disc_pushforward_quantiles(samples, names,
baseline_values=slopes_true,
residual=TRUE,
xlab="All Slopes")
par(mfrow=c(2, 1))
util$plot_disc_pushforward_quantiles(samples, names,
baseline_values=slopes_true,
xlab="All Slopes",
ylab="Marginal Posterior Quantiles")
util$plot_disc_pushforward_quantiles(samples, names,
baseline_values=slopes_true,
residual=TRUE,
xlab="All Slopes",
ylab="Marginal Posterior Quantile Residuals")
slopes_true
slopes_true <- c(-6.00, -1.50, 13.00,  0.50,  0.25,  1.00, -0.50, -2.00, -1.00)
par(mfrow=c(2, 1))
util$plot_disc_pushforward_quantiles(samples, names,
baseline_values=slopes_true,
xlab="All Slopes",
ylab="Marginal Posterior Quantiles")
util$plot_disc_pushforward_quantiles(samples, names,
baseline_values=slopes_true,
residual=TRUE,
xlab="All Slopes",
ylab="Marginal Posterior Quantile Residuals")
setwd("~/Desktop/visualization_functions/r")
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
parallel:::setDefaultClusterOptions(setup_strategy = "sequential")
util <- new.env()
source('stan_utility_rstan.R', local=util)
source('visualization_functions.R', local=util)
par(family="serif", las=1, bty="l", cex.axis=1, cex.lab=1, cex.main=1,
xaxs="i", yaxs="i", mar = c(5, 5, 3, 1))
data <- read_rdump("data/uni_data.R")
par(mfrow=c(1, 2))
util$plot_line_hist(data$x, -6, 6, 0.5,
xlab="x", main="Observed Inputs")
util$plot_line_hist(data$y, -4, 7, 0.5,
xlab="y", main="Observed Outputs")
par(mfrow=c(1, 1))
util$plot_line_hists(data$x, data$y, -6, 7, 0.5, xlab="")
text(-3.5, 90, cex=1.25, label="Observed\nInputs",
pos=4, col="black")
text(3.5, 90, cex=1.25, label="Observed\nOutputs",
pos=4, col=util$c_mid_teal)
par(mfrow=c(1, 1))
plot(data$x, data$y, type="p", pch=16, cex=1, col="black")
data$N_grid <- 1000
data$x_grid <- seq(-6, 6, 12 / (data$N_grid - 1))
fit <- stan(file='stan_programs/uni_prior_model.stan',
data=data, seed=5838299,
warmup=1000, iter=2024, refresh=0)
diagnostics <- util$extract_hmc_diagnostics(fit)
util$check_all_hmc_diagnostics(diagnostics)
samples <- util$extract_expectands(fit)
base_samples <- util$filter_expectands(samples,
c('alpha', 'beta', 'sigma'))
util$check_all_expectand_diagnostics(base_samples)
fit <- stan(file='stan_programs/uni_prior_model.stan',
data=data, seed=5838297,
warmup=1000, iter=2024, refresh=0)
diagnostics <- util$extract_hmc_diagnostics(fit)
util$check_all_hmc_diagnostics(diagnostics)
samples <- util$extract_expectands(fit)
base_samples <- util$filter_expectands(samples,
c('alpha', 'beta', 'sigma'))
util$check_all_expectand_diagnostics(base_samples)
fit <- stan(file='stan_programs/uni_prior_model.stan',
data=data, seed=5838299,
warmup=1000, iter=2024, refresh=0,
control=list('delta' = 0.85))
diagnostics <- util$extract_hmc_diagnostics(fit)
util$check_all_hmc_diagnostics(diagnostics)
fit <- stan(file='stan_programs/uni_prior_model.stan',
data=data, seed=5838299,
warmup=1000, iter=2024, refresh=0,
control=list('delta_adapt' = 0.85))
diagnostics <- util$extract_hmc_diagnostics(fit)
util$check_all_hmc_diagnostics(diagnostics)
fit <- stan(file='stan_programs/uni_prior_model.stan',
data=data, seed=5838299,
warmup=1000, iter=2024, refresh=0,
control=list('adapt_delta' = 0.85))
diagnostics <- util$extract_hmc_diagnostics(fit)
util$check_all_hmc_diagnostics(diagnostics)
samples <- util$extract_expectands(fit)
base_samples <- util$filter_expectands(samples,
c('alpha', 'beta', 'sigma'))
util$check_all_expectand_diagnostics(base_samples)
fit <- stan(file='stan_programs/uni_prior_model.stan',
data=data, seed=5838299,
warmup=1000, iter=2024, refresh=0,
control=list('adapt_delta' = 0.9))
diagnostics <- util$extract_hmc_diagnostics(fit)
util$check_all_hmc_diagnostics(diagnostics)
samples <- util$extract_expectands(fit)
base_samples <- util$filter_expectands(samples,
c('alpha', 'beta', 'sigma'))
util$check_all_expectand_diagnostics(base_samples)
